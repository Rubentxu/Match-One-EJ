package com.ilargia.games.core;

import com.ilargia.games.entitas.EntityMetaData;
import com.ilargia.games.entitas.interfaces.FactoryEntity;
import com.ilargia.games.entitas.exceptions.EntitasException;
import com.ilargia.games.components.GameBoard;
import com.ilargia.games.components.Score;

/**
 * ---------------------------------------------------------------------------
 * '<auto-generated>' This code was generated by CodeGeneratorApp.
 * ---------------------------------------------------------------------------
 */
public class Pool extends com.ilargia.games.entitas.BasePool<Entity> {

	public Pool(int totalComponents, int startCreationIndex,
			EntityMetaData metaData, FactoryEntity<Entity> factoryMethod) {
		super(totalComponents, startCreationIndex, metaData, factoryMethod);
	}

	public Entity getGameBoardEntity() {
		return getGroup(CoreMatcher.GameBoard()).getSingleEntity();
	}

	public GameBoard getGameBoard() {
		return getGameBoardEntity().getGameBoard();
	}

	public boolean hasGameBoard() {
		return getGameBoardEntity() != null;
	}

	public Entity setGameBoard(int columns, int rows) {
		if (hasGameBoard()) {
			throw new EntitasException(
					"Could not set GameBoard!" + this
							+ " already has an entity with GameBoard!",
					"You should check if the pool already has a GameBoardEntity before setting it or use pool.ReplaceGameBoard().");
		}
		Entity entity = createEntity();
		entity.addGameBoard(columns, rows);
		return entity;
	}

	public Entity replaceGameBoard(int columns, int rows) {
		Entity entity = getGameBoardEntity();
		if (entity == null) {
			entity = setGameBoard(columns, rows);
		} else {
			entity.replaceGameBoard(columns, rows);
		}
		return entity;
	}

	public Pool removeGameBoard() {
		destroyEntity(getGameBoardEntity());
		return this;
	}

	public Entity getBurstModeEntity() {
		return getGroup(InputMatcher.BurstMode()).getSingleEntity();
	}

	public boolean isBurstMode() {
		return getBurstModeEntity() != null;
	}

	public Pool setBurstMode(boolean value) {
		Entity entity = getBurstModeEntity();
		if (value != (entity != null)) {
			if (value) {
				entity.setBurstMode(true);
			} else {
				destroyEntity(entity);
			}
		}
		return this;
	}

	public Entity getScoreEntity() {
		return getGroup(ScoreMatcher.Score()).getSingleEntity();
	}

	public Score getScore() {
		return getScoreEntity().getScore();
	}

	public boolean hasScore() {
		return getScoreEntity() != null;
	}

	public Entity setScore(int value) {
		if (hasScore()) {
			throw new EntitasException(
					"Could not set Score!" + this
							+ " already has an entity with Score!",
					"You should check if the pool already has a ScoreEntity before setting it or use pool.ReplaceScore().");
		}
		Entity entity = createEntity();
		entity.addScore(value);
		return entity;
	}

	public Entity replaceScore(int value) {
		Entity entity = getScoreEntity();
		if (entity == null) {
			entity = setScore(value);
		} else {
			entity.replaceScore(value);
		}
		return entity;
	}

	public Pool removeScore() {
		destroyEntity(getScoreEntity());
		return this;
	}
}